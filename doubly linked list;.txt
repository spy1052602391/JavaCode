interface ILink{
    boolean add(Object data);
    int contains(Object data);
    boolean remove(Object data);
    Object set(int index,Object newData);
    Object get(int index);
    void clear();
    Object[] toArray();
    int size();
    void printLink();
}

class CreatLink implements ILink{
    private int size;
    private Node head;
    private Node last;
    private class Node{
        private Node prev;
        private Object data;
        private Node next;

        public Node(Node prev, Object data, Node next) {
            this.prev = prev;
            this.data = data;
            this.next = next;
        }
    }
    @Override
    public boolean add(Object data) {
        Node prev = last;
        Node newNode = new Node(prev,data,null);
        if(null == head){
            head = newNode;
        }else{
            prev.next = newNode;
        }
        last = newNode;
        this.size++;
        return true;
    }

    @Override
    public int contains(Object data) {
        int index = 0;
        if(null == data){
            for(Node temp=head; temp!=null; temp=temp.next){
                if(temp.data == null){
                    return index;
                }
                index++;
            }
        }else{
            for(Node temp=head; temp!=null; temp=temp.next){
                if(temp.data.equals(data)){
                    return index;
                }
                index++;
            }
        }

        return -1;
    }

    @Override
    public boolean remove(Object data) {
        if(null == data){
            for(Node temp=head; temp!=null; temp=temp.next){
                if(temp.data == null){
                    unlink(temp);
                    this.size--;
                    return true;
                }
            }
        }else{
            for(Node temp=head; temp!=null; temp=temp.next){
                if(temp.data.equals(data)){
                    unlink(temp);
                    this.size--;
                    return true;
                }
            }
        }
        return false;
    }

    @Override
    public Object set(int index, Object newData) {

        if(index>=0 && index<this.size){
            Node node = findNode(index);
            Object preNode = node.data;
            node.data = newData;
            return preNode;
        }
        return null;
    }

    @Override
    public Object get(int index) {
        if(index>=0 && index<this.size){
            return findNode(index).data;
        }
        return null;
    }

    @Override
    public void clear() {
        for(Node temp=head; temp!=null; temp=head){
            head = head.next;
            temp.prev = null;
            temp.next = null;
            temp.data = null;
            temp = null;
            size--;
        }
    }

    @Override
    public Object[] toArray() {
        Object[] obj = new Object[size];
        int i = 0;
        for(Node temp=head; temp!=null; temp=temp.next){
            obj[i++] = temp.data;
        }
        return obj;
    }

    @Override
    public int size() {
        return this.size;
    }

    @Override
    public void printLink() {
        for(Node temp=head; temp!=null; temp=temp.next){
            System.out.println(temp.data);
        }
    }

    public Node findNode(int index){
        int i;
        Node newNode;
        if(index<(this.size>>1)){
            newNode = head;
            for( i=0; i<index; i++){
                newNode = newNode.next;
            }
            return newNode;
        }else{
            newNode = last;
            for( i=size-1; i>index; i--){
                newNode = newNode.prev;
            }
            return newNode;
        }
    }
    public Object unlink(Node node){
        Object cur = node.data;
        Node prev = node.prev;
        Node next = node.next;
        if(prev!=null){
            prev.next = next;
            node.prev = null;
        }else{
            this.head = next;
        }
        if(next!=null){
            next.prev = prev;
            node.next = null;
        }else{
            this.last = prev;
        }
        node = null;
        return cur;
    }
}


public class Test {
    public static void main(String[] args) {
        ILink link = new CreatLink();
       // Object[] obj = link.toArray();
        link.add("1");
        link.add("2");
        link.add("3");
        link.printLink();
        System.out.println(link.size());
        System.out.println(link.contains("4"));
        System.out.println(link.get(0));
        System.out.println(link.set(2,"哈喽"));
        System.out.println(link.get(2));
        link.clear();
        System.out.println(link.size());
        link.add("车头");
        link.add("第一节车厢");
        link.add("车尾");
        link.printLink();
        link.remove("第一节车厢");
        link.printLink();
       // System.out.println(obj[1]);
    }
}
